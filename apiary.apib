FORMAT: 1A
HOST: https://api.gpsinsight.com/driver/

# GPS Insight V3

Driver-centric API for GPS Insight.

## API Channel Headers

Include `X-Channel` and additionally `X-Channel-Version` (if applicable) in order to contextualize your request from a particular channel. Certain requests may be rejected or not behave as expected if you do not provide appropriate accurate information. 

## Group Session

## Authenticate [/session/authenticate/]

### Authenticate Driver [POST /session/authenticate/]

+ Request (application/json)
    The auth_code will be sent to the driver's phone number, if the phone is registered to the right ref_id
    
    + Body
    
            {
                "ref_id": 76,
                "phone_number": 2085678934
            }

+ Response 200

        {
            "success": true
        }

+ Request (application/json)
    If the serial_number has a driver assigned, response can contain a session token, doing the session generation in one step.

    + Headers
    
            Get-Record: true
    + Body
    
            {
                "ref_id": 76,
                "serial_number": 123456789101112
            }

+ Response 200

        {
            "session": <session_token>
        }


### Session from Auth Code [GET /session/authorize/]

    
+ Request (application/json)
    The authcode comes from the Authenticate method, but is not delivered as a response in the API.  It is only delivered to the driver's phone.

    + Body
    
            {
                "auth_code": "string",
            }

+ Response 200

        {
            "session": <session_token>
        }

### Session Data Refresh [GET /session]

+ Request

    + Headers
    
            Session: <Valid session token>
            
+ Response 200

        {
            "session": {
                "type": "phone_number",
                "identifier": "6028881234",
                "auth_token": "9bf7f62b1ecafe43243d38cae96c95dc91218b34",
                "driver_ref_id": "6028881234",
                "driver_id": 4567023,
                "account_id": "1013997",
                "active": "1",
                "fname": "Dvir",
                "lname": "Driver",
                "tz_offset": "-7",
                "email_address": "email.address@gpsinsight.com",
                "phone_number": "6028881234",
                "vin": "CA1111111127",
                "vehicle": "Qa Suburu"
            },
            "permission": [],
            "driver": {
                "first_name": "Dvir",
                "last_name": "Driver",
                "phone_number": "6028881234"
            },
            "vehicle": {
                "vehicle": "Qa Suburu",
                "vin": "CA1111111127",
                "vin2": "CA1111111127",
                "country": "US",
                "license_state": "AZ",
                "license_number": "ABC890",
                "color": "Red",
                "make": "Suburu",
                "model": "Outback",
                "model_year": "2007",
                "odometer": "28364",
                "serial_number": "1111111127"
            }
        }

### Mobile Push Notification (MPN) Token Registration [POST /session/register_mpn]

+ Request
    In order to properly validate your token, you must submit a valid mobile channel ID header (e.g. `driver_android`). 

    + Headers
    
            Session: <Valid session token>
            X-Channel: <Valid channel ID>

    + Body 
            {
                "token": "adef3434931bef4aa132312"
            }

+ Response 200
        
            {
                "success": true
            }

## Group Messaging

## Messages [/message/]

### Get All Messages [GET /message/{?since}{?until}{?output_unix_time}]

+ Parameters
    
    + since: `2015-08-05T08:40:51` (String,optional) - ISO8601 date
    + until: `2015-08-05T08:40:51` (String,optional) - ISO8601 date
    + output_unix_time: `1` (Boolean,optional) - Resulting times as epoch time

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200 (application/json)

        [
            {
                "id": "870h8dfhs9d8fg",
                "timestamp": "2015-08-05T08:40:51",
                "read_dt": null,
                "deleted_dt": null,
                "from": "John Somebody",
                "message": "Some message that is really important."
            }
        ]

### Get a Message [GET /message/{id}]

+ Parameters
    
    + id: `870h8dfhs9d8fg` (String, optional)

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200 (application/json)

        [
            {
                "id": "870h8dfhs9d8fg",
                "timestamp": "2015-08-05T08:40:51",
                "from": "John Somebody",
                "message": "Some message that is really important."
            }
        ]

### Send a Message [POST /message]

+ Request (application/json)

    + Headers
    
            Session: <Valid session token>
            Get-Record: false
    
    + Body
    
            {
                "to": "user",
                "message": "A message",
                "from_device": "device_id",
                "created_time": "(optional) defaults to time of request",
                "read_dt": "(optional) automatically set read timestamp to provided time",
                "deleted_dt": "(optional) automatically set deleted timestamp to provided time",
                "parent_message_id": "(optional) relate to existing message",
                "message_type": "(optional) type of message - default 'm'",
            }

+ Response 200 (application/json)

        {
            "id": 123456
        }

+ Request (application/json)

    + Headers
    
            Session: <Valid session token>
            Get-Record: true
    
    + Body
    
            {
                "to": "user",
                "from": "Sum Yung Gai",
                "from_type": "driver",
                "device_type": "mobile",
                "message": "A message"
            }

+ Response 200 (application/json)

        {
            "id": 123456
            "to": "user",
            "from": "Sum Yung Gai",
            "from_type": "driver",
            "device_type": "mobile",
            "message": "A message"
        }


## Message Receipt [/message/receipt/]

### Send Message Receipt [POST /message/receipt/{id}]

+ Parameter

    + id: 1234 (String) - ID of message read

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200


### Send Multiple Receipts [POST /message/receipt/]

+ Request

    + Headers
    
            Session: <Valid session token>
            
    + Body
    
            [
                {
                    "id": 123
                },{
                    "id": 124
                },{
                    "id": 125
                }
            ]

+ Response 200

## Group Dispatching

## Dispatch [/dispatch{?since}{?until}]

### Get All Dispatches [GET]

+ Parameters

    + since: `2015-08-05T08:40:51` (String, optional) - ISO8601 date
    + until: `2017-06-15T08:00:00` (String, optional) - ISO8601 date

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200 (application/json)

        [
            {
                "id": "<Dispatch ID>",
                "to_type": "driver",
                "to": "Driver001",
                "latitude": 121.191,
                "longitude": -100.231,
                "address": "3210 N Butte St. Bremerton, WA 96753",
                "note": "A really important note.",
                "timestamp": "2015-08-05T08:40:51",
                "read_dt": null,
                "deleted_dt": null
            }
        ]

## Dispatch Receipt [/dispatch/receipt/{id}]

### Send Dispatch Receipt [POST]

+ Parameters

    + id: 1234 (String) - ID of message read

+ Request

    + Headers
    
            Session: <Valid session token>
            
+ Response 200

## Driver Details

### Retrieve Driver Details [/info{?driver_id}{?phone_number}]

+ Parameters

    + driver_id: 14512311 (Number, optional) - Driver ID to look up
    + phone_number: 6025551234 (Number, optional) - Phone number of driver to look up

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200

        {
            "first_name": "Tracey",
            "last_name": "Cherrytree",
            "refid": "tc1015",
        }
        
## Driver Assignment

### Assign Driver [POST /assign{?vin}(?vehicle}{?effective}{?expires}]

+ Parameters

    + vin: CA1814003214 (String) - GPSI VIN to assign to active driver
    + vehicle: TAHOE01 (String, optional) - Specify vehicle exact descriptor, partial descriptor, or "true" VIN in leu of GPSI VIN
    + effective: 2017-01-15T16:40:30-07:00 (String) - ISO8601 date
    + expires: 2017-01-31T23:59:59-07:00 (String, optional) - ISO8601 date

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200

        {
            "success": true
        }
        
+ Response 400
        
        Specified VIN unknown to this account
        

### Unassign Driver [POST /unassign{?vin}{?vehicle}{?expires}]

Assigns a driver to a target vehicle, and also returns the last DVIR committed for that vehicle (if available). 
If no previous DVIR is available, it will be NULL.

+ Parameters

    + vin: CA1814003214 (optional, String) - VIN to assign to active driver
    + vehicle: TAHOE01 (String, optional) - Specify vehicle descriptor in leu of VIN
    + expires: 2017-01-31T23:59:59-07:00 (String, optional) - ISO8601 date

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200

        {
            "success": true,
            "dvir": { ... }
        }

# DVIRs [/dvir{?limit}]

## Retrieve DVIRs [GET]

Retrieves the list of dvirs

+ Parameters

    + limit (optional, number) ... Maximum number of DVIRs to retreive

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200 (application/json)

            {
                "dvir_id": 1,
                "vin": "CA1234567890",
                "defect_code_id": 1,
                "is_trailer": false,
                "trailer_name": "",
                "shipment": "(only for trailers)",
                "safety_status": true,
                "inspection_type": "pre",
                "notes": [
                    { "note_type": "general",
                      "note": "A general note",
                      "inserted_dt": "2017-03-02 22:10:20-07:00"
                              }
                ],
                "created_by": 130323,
                "start_dt": "2017-03-02 22:10:20-07:00",
                "end_dt": "2017-03-02 22:20:20-07:00",
                "approved_by": null,
                "approved_dt": null,
                "defects": [{
                    "defect_id": 2,
                    "defect_code_id":  1,
                    "name": "odometer",
                    "repaired_by": "Alan",
                    "repaired_dt": "1986-06-11 4:00:00-07:00",
                    "approved_by": "Matthew",
                    "approved_dt": "1986-06-11 6:00:00-07:00",
                    "priority":  1,
                    "notes": [
                        { "note_type": "general", "inserted_dt": "1986-06-11 08:30:00-07:00", "note": "the miles aren't coming off" },
                        { "note_type": "approval", "inserted_dt": "1986-06-12 11:41:00-07:00", "note": "DVIR approved" },
                        { "note_type": "repair", "inserted_dt": "1986-06-14 08:30:00-07:00", "note": "odometer fixed" }
                    ]
                }]
            }, ...
            ]

## Create a DVIR [POST]

+ Request (application/json)

    + Headers
    
            Session: <Valid session token>
    
    + Body
    
            {
                "is_trailer": false,
                "safety_status": true,
                "inspection_type": "pre",
                "notes": "example notes",
                "created_by": 130323,
                "start_dt": "2017-03-02 22:10:20-07:00",
                "end_dt": "2017-03-02 22:20:20-07:00"
                defects: [{
                    "defect_code_id': 1,
                    "notes": [
                        { "note_type": "general", "inserted_dt": "1986-06-11 08:30:00-07:00", "note": "the miles aren't coming off" }
                    ],
                    "repaired_by": "Alan",
                    "repaired_dt": "1986-06-11 4:00:00-07:00",
                    "approved_by": "Matthew",
                    "approved_dt": "1986-06-11 6:00:00-07:00",
                    "priority":  1
                }]
            }

+ Response 200 (application/json)

        {
            "success": true
        }
        
## UPDATE a DVIR Record [/{dvir_id}]

+ Request (application/json)

    + Headers
    
            Session: <Valid session token>
    
    + Body
            {
                "notes": "Adding notes about notes.."
            }

+ Response 200 (application/json)

        {
            "success": true
        }

# DVIR Defect Code [/dvir/defect_codes{?code_type}]

## Retrieve DVIR Defect codes [GET]
Retrieves the list of DVIR defect codes

+ Parameters

    + code_type: vehicle (optional, String) - Limit the resulting codes to a particular type
    + subcodes: 1 (optional, Number) - Include subcodes in response (default is '0')

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200 (application/json)

            [
                {
                    "defect_code_id": 1,
                    "account_id": null,
                    "name": "turn signal",
                    "code_type": "vehicle",
                    "subcodes": []
                },
                {
                    "defect_code_id": 2,
                    "account_id": null,
                    "name": "hood",
                    "code_type": "vehicle",
                    "subcodes": []
                },
                {
                    "defect_code_id": 3,
                    "account_id": null,
                    "name": "hood",
                    "code_type": "both",
                    "subcodes": [
                        "sub_defect_code_id": 1,
                        "defect_code_id": 3,
                        "name": "Dented",
                        "code_type": "both"                    
                    ]
                },                
            ]
            
# DVIR Sub Defect Code [/dvir/sub_defect_codes{?code_type}(?defect_code_id)]

## Retrieve DVIR Sub Defect codes [GET]
Retrieves the list of DVIR "sub-defect" codes.

+ Parameters

    + code_type: vehicle (optional, String) - Limit the resulting codes to a particular type
    + defect_code_id: 414 (optional, Number) - Limit the resulting codes to those of a particular Defect Code ID.

+ Request

    + Headers
    
            Session: <Valid session token>

+ Response 200 (application/json)

            [
                {
                    "sub_defect_code_id": 1,
                    "defect_code_id": 1,
                    "name": "Broken",
                    "code_type": "vehicle"
                },
                {
                    "sub_defect_code_id": 2,
                    "defect_code_id": 1,
                    "name": "Cracked",
                    "code_type": "vehicle"
                },
                {
                    "sub_defect_code_id": 3,
                    "defect_code_id": 2,
                    "name": "Underinflated",
                    "code_type": "both"
                },
            ]
            

## DVIR Defects [/dvir/{dvir_id}/defect/{dvir_defect_id}]

## Update a Defect Record [POST]

+ Request (application/json)

    + Headers
    
            Session: <Valid session token>
    
    + Body
    
            {
                "repaired_by": "Johnny Wrench",
                "repaired_dt": "2016-10-01T09:50:00-7:00",
                "repaired_notes": "Just a transmutation of your 110 into your 220."    
            }

+ Response 200 (application/json)

        {
            "success": true
        }
